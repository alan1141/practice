/*
 * Soulation6.cpp
 *
 *  Created on: Feb 14, 2018
 *      Author: alan
 */

#include<iostream>
#include<vector>
#include<math.h>
#include "Soulation6.h"

namespace leetcodeeasy {

Soulation6::Soulation6() {
	// TODO Auto-generated constructor stub

}

Soulation6::~Soulation6() {
	// TODO Auto-generated destructor stub
}

bool Soulation6::isSymmetric(TreeNode* root) {
	if(root == NULL) return true;

	int max_level = getlevel(root);
	std::vector<TreeNode *> v (pow(2, max_level));

	//	std::cout <<  "Level: " << max_level << std::endl;

	symmetric(root, v, 1);

	for(int level = 2 ; level <= max_level ; level++) {
		int base = pow(2, level-1);
		std::cout << "Level:" << level << std::endl;
		for(int i = 0 ; i < pow(2, level-1)/2 ; i++) {
			//i - pow(2, level-1)-1
			TreeNode *node1 = v.at(base+i);
			TreeNode *node2 = v.at(base + (pow(2, level-1)-1-i));
			std::cout << "n1:" << node1 << " n2:" << node2 << std::endl;
			if(node1 == NULL && node2 == NULL) continue;
			if((node1 != NULL && node2 == NULL) || (node1 == NULL && node2 != NULL)) return false;
			if(v.at(base+i)->val != v.at(base + (pow(2, level-1)-1-i))->val) {
				std::cout << "false!!!" << std::endl;
				return false;
			}
		}
	}
	return true;
}

int Soulation6::getlevel(TreeNode* root) {
	if(root == NULL) return 0;
	int l_level = getlevel(root->left);
	int r_level = getlevel(root->right);
	int max_level = l_level >= r_level ? l_level : r_level;
	return max_level + 1;
}

void Soulation6::symmetric(TreeNode *root, std::vector<TreeNode *> &v, int index) {
	if(root == NULL) return;
	v.at(index) = root;
	symmetric(root->left, v, index*2);
	symmetric(root->right, v, index*2+1);
}

void Soulation6::print_vector(std::vector<TreeNode*>& v) {
	for(size_t index = 1 ; index < v.size() ; ++index) {
		if(v.at(index) != NULL) std::cout << "Index: " << index << " Value: " << v.at(index)->val << std::endl;
		else std::cout << "NULL" << std::endl;
	}
}

} /* namespace leetcodeeasy */

//int main(int argc, char *argv[]) {
//	leetcodeeasy::Soulation6 *soulation6 = new leetcodeeasy::Soulation6();
//	leetcodeeasy::TreeNode *root = new leetcodeeasy::TreeNode(1);
//	leetcodeeasy::TreeNode *tmp;
//
//	root->left = new leetcodeeasy::TreeNode(2); root->right = new leetcodeeasy::TreeNode(2);
//
//	tmp = root->left;
//	tmp->left = new leetcodeeasy::TreeNode(3);
//	tmp->right = new leetcodeeasy::TreeNode(4);
//
//	tmp = root->right;
//	tmp->left = new leetcodeeasy::TreeNode(4);
//	tmp->right = new leetcodeeasy::TreeNode(3);
//	std::cout << soulation6->isSymmetric(root) << std::endl;
//	return 0;
//
//}
